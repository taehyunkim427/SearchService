name: search_service_api_cicd

# 트리거를 수행할 브랜치를 지정
on:
  push:
    branches: [ main ]

# 환경설정
env:
  DOCKER_IMAGE: ghcr.io/${{ github.actor }}/search_service_api
  VERSION: ${{ github.sha }}
  NAME: search_service_api

jobs:
  # 빌드 Job
  build:
    name: Build
    runs-on: ubuntu-latest
    # GitHub Actions에서 write 권한부여
    permissions:
      packages: write
    steps:
      # github repository에서 checkout
      - uses: actions/checkout@v2
      # docker build 수행
      - name: Set up docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ env.VERSION }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # GitHub 컨테이너 레지스트리에 로그인 후 빌드 & 푸시
      - name: Login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:latest
          platforms: linux/arm64/v8

  # 배포 Job
  deploy:
    needs: build  # build 후에 실행되도록 정의
    name: Deploy
    runs-on: [ self-hosted, macOS, ARM64 ] # run.sh ./configure에서 사용할 label명
    steps:
      - name: Login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # 기존 Redis 컨테이너 중지 및 제거
      - name: Stop and remove existing Redis container
        run: |
          docker stop redis || true
          docker rm redis || true
      # Redis 컨테이너 실행
      - name: Run Redis container
        run: |
          docker pull redis:latest
          docker run -d --name redis --restart always -p 6379:6379 -v "$(pwd)/redis.conf:/usr/local/etc/redis/redis.conf" redis:latest redis-server /usr/local/etc/redis/redis.conf
      # 8080 -> 8080 포트로 수행하도록 지정
      - name: Docker run
        run: |
          docker stop ${{ env.NAME }} && docker rm ${{ env.NAME }} && docker rmi ${{ env.DOCKER_IMAGE }}:latest
          docker run -d -p 8080:8080 --link redis:redis -e SPRING_PROFILES_ACTIVE=prod --name ${{ env.NAME }} --restart always ${{ env.DOCKER_IMAGE }}:latest
